install.packages("readr")
install.packages("corncob")
library(corncob)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(readr)
results <- read_csv('introsurvey.csv')
# number of cases
nrow(results)
# number of variables
ncol(results)
# names of variables
names(results)
install.packages("gapminder")
library(gapminder)
data("gapminder")
str(gapminder)
gapminder
View(gapminder)
gapminder$pop
head(gapminder$pop)
# full_bg <- read_csv("https://raw.githubusercontent.com/bryandmartin/STAT155/master/docs/Projects/project1_bgdataviz/board_game_raw.csv")
#
# write_csv(full_bg, "./Data/full_bg.csv")
full_bg <- read_csv("./Data/full_bg.csv")
library(tidyverse)
library(splitstackshape)
# full_bg <- read_csv("https://raw.githubusercontent.com/bryandmartin/STAT155/master/docs/Projects/project1_bgdataviz/board_game_raw.csv")
#
# write_csv(full_bg, "./Data/full_bg.csv")
full_bg <- read_csv("./Data/full_bg.csv")
View(full_bg)
v
bgdata <- full_bg %>%
mutate(complex_round = round(average_complexity, 1))
View(bgdata)
bgdata <- full_bg %>%
mutate(complex_round = round(average_complexity, 0))
library(corncob)
logit(-7)
invlogit(-7)
exp(-.6989)
exp(-.989)
exp(-2.989)
exp(-1.8265098)
exp(.4*.16)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(broom)
library(mosaic) # for bootstrapping
library(gsheet) # for reading data from Google Sheet
results <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-MdPyEwPwZvt3DgWHBt3meZlKOPJUtLB3Xmloqc24Tc/edit?usp=sharing')
results <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-MdPyEwPwZvt3DgWHBt3meZlKOPJUtLB3Xmloqc24Tc/edit?usp=sharing')
problems()
results <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1-MdPyEwPwZvt3DgWHBt3meZlKOPJUtLB3Xmloqc24Tc/edit?usp=sharing')
pbinom(16, 41, prob = 0.5)
pbinom(9, 26, prob = 0.5)
pbinom(128, 180, prob = 0.5)
pbinom(128, 280, prob = 0.5)
pbinom(278, 230+278, prob = 0.5, lower.tail = F)
.5*.5*.5*.5*.5
library(tidyverse)
library(tidymodels)
tidymodels_prefer()
?step_arrange
?step_center
?step_filter
library(tidyverse)
library(tidymodels)
bind_cols(c(1,2,3), c("a","b","c"))
library(dplyr)
library(readr)
library(broom)
library(ggplot2)
library(tidymodels)
tidymodels_prefer() # Resolves conflicts, prefers tidymodel functions
set.seed(123)
cars2018 <- read_csv("https://raw.githubusercontent.com/juliasilge/supervised-ML-case-studies-course/master/data/cars2018.csv")
head(cars2018)
# Cleaning
cars2018 <- cars2018 %>%
select(-model_index)
lm_spec <-
linear_reg() %>%
set_engine(engine = 'lm') %>%
set_mode('regression')
full_rec <- recipe(mpg ~ ., data = cars2018) %>%
update_role(model, new_role = 'ID') %>% # we want to keep the name of the model but not as a predictor or outcome
step_nzv(all_predictors()) %>% # removes variables with the same value
step_normalize(all_numeric_predictors()) %>% # important standardization step for LASSO
step_dummy(all_nominal_predictors())  # creates indicator variables for categorical variables
full_lm_wf <- workflow() %>%
add_recipe(full_rec) %>%
add_model(lm_spec)
full_model <- fit(full_lm_wf, data = cars2018)
full_model %>% tidy()
set.seed(74)
# Create CV folds
data_cv10 <- vfold_cv(cars2018, v = 10)
fit_cv <- fit_resamples(full_lm_wf,
resamples = data_cv10,
metrics = metric_set(rmse, mae)
)
fit_cv %>% collect_metrics()
# Tune and fit a LASSO model to the data (with CV)
set.seed(74)
# Create CV folds
data_cv10 <- vfold_cv(cars2018, v = 10)
# Lasso Model Spec with tune
lm_lasso_spec_tune <-
linear_reg() %>%
set_args(mixture = 1, penalty = tune()) %>% ## mixture = 1 indicates Lasso
set_engine(engine = 'glmnet') %>% #note we are using a different engine
set_mode('regression')
# Workflow (Recipe + Model)
lasso_wf_tune <- workflow() %>%
add_recipe(full_rec) %>%
add_model(lm_lasso_spec_tune)
# Tune Model (trying a variety of values of Lambda penalty)
penalty_grid <- grid_regular(
penalty(range = c(-3, 1)), #log10 transformed
levels = 30)
tune_output <- tune_grid( # new function for tuning hyperparameters
lasso_wf_tune, # workflow
resamples = data_cv10, # cv folds
metrics = metric_set(rmse, mae),
grid = penalty_grid # penalty grid defined above
)
View(data_cv10)
data_cv10
str(data_cv10)
data_cv10$splits
View(data_cv10[[1]][[1]])
str(data_cv10[[1]][[1]])
View(data_cv10[[1]][[1]])
View(data_cv10[[1]][[1]]$data)
dim(data_cv10[[1]][[1]]$data)
dim(cars2018)
data_cv10 <- vfold_cv(cars2018, v = 10)
str(data_cv10)
data_cv10[[1]]
data_cv10[[1]][[1]]
str(data_cv10[[1]][[1]])
View(data_cv10[[1]][[1]]$data)
View(data_cv10[[1]][[2]]$data)
View(data_cv10[[1]][[3]]$data)
View(data_cv10[[1]][[3]]$in_id)
data_cv10[[1]][[3]]$in_id
penalty(range = c(-3, 1))
10^-3
10^1
install.packages('probably')
??sense
??sens
install.packages("remotes")
remotes::install_github("bryandmartin/demo")
library(demo)
library(Demo)
c_to_f(35)
f_to_c(35)
?f_to_c
install.packages("bookdown")
install.packages("pandoc")
verify_rstudio_version()
rmarkdown::pandoc_available(
)
?rmarkdown::pandoc_available
pandoc_version()
library(rmarkdown)
pandoc_version()
pandoc_available()
install.packages("bookdown")
library(bookdown)
getwd()
setwd("Desktop/253_fall_2022/")
list.files()
bookdown::render_book("index.Rmd", "bookdown::gitbook")
install.packages("readr")
install.packages("tidymodels")
install.packages("tidyverse")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
rmarkdown::pandoc_path_arg()
rmarkdown::pandoc_available()
Sys.getenv("RSTUDIO_PANDOC")
